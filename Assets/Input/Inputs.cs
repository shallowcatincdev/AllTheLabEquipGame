//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""Vr"",
            ""id"": ""0a7da3a5-8a16-41c7-b335-4c2132a60a16"",
            ""actions"": [
                {
                    ""name"": ""HmdRotation"",
                    ""type"": ""Value"",
                    ""id"": ""47d647cc-5867-461a-b64e-b9b5b9075933"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HmdPosition"",
                    ""type"": ""Value"",
                    ""id"": ""cd955865-6e77-4400-b4ad-2cd5a03fd450"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""6d776173-6306-4be6-8f2e-f7c1f01a4abf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GasBreak"",
                    ""type"": ""Value"",
                    ""id"": ""2078f6cd-6855-4888-96c9-c64421aedd26"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""039b33c7-3f11-4f00-86ef-4a1c0832e83b"",
                    ""path"": ""<XRHMD>/deviceRotation"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HmdRotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b1a37a4-d57f-4d73-b5b8-8b795fd54d23"",
                    ""path"": ""<XRHMD>/devicePosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HmdPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11ad3f9a-ab7c-49a3-ab8c-ce4724f7c79e"",
                    ""path"": ""<XRController>/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8f422a6-3cf5-4695-b175-4faa3f82eff5"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""GamePad"",
                    ""id"": ""d7d077c5-202d-48ee-a6c1-47cd73d8d940"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GasBreak"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9792e0d5-2dfc-4389-8a4f-eb66a5c497b4"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GasBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""b4f55ba2-c7db-4a7e-8616-eeacc46844d2"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GasBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Xr"",
                    ""id"": ""dd6e827b-9940-47a8-b6ff-2f700ee0cdd0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GasBreak"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1f96bcf0-ce96-462c-b9c6-ec8f73ab6252"",
                    ""path"": ""<XRController>{LeftHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GasBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d22cabb2-b5f5-4690-b9e1-dedb0e5999d9"",
                    ""path"": ""<XRController>{RightHand}/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GasBreak"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Vr
        m_Vr = asset.FindActionMap("Vr", throwIfNotFound: true);
        m_Vr_HmdRotation = m_Vr.FindAction("HmdRotation", throwIfNotFound: true);
        m_Vr_HmdPosition = m_Vr.FindAction("HmdPosition", throwIfNotFound: true);
        m_Vr_Steer = m_Vr.FindAction("Steer", throwIfNotFound: true);
        m_Vr_GasBreak = m_Vr.FindAction("GasBreak", throwIfNotFound: true);
    }

    ~@Inputs()
    {
        UnityEngine.Debug.Assert(!m_Vr.enabled, "This will cause a leak and performance issues, Inputs.Vr.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Vr
    private readonly InputActionMap m_Vr;
    private List<IVrActions> m_VrActionsCallbackInterfaces = new List<IVrActions>();
    private readonly InputAction m_Vr_HmdRotation;
    private readonly InputAction m_Vr_HmdPosition;
    private readonly InputAction m_Vr_Steer;
    private readonly InputAction m_Vr_GasBreak;
    public struct VrActions
    {
        private @Inputs m_Wrapper;
        public VrActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @HmdRotation => m_Wrapper.m_Vr_HmdRotation;
        public InputAction @HmdPosition => m_Wrapper.m_Vr_HmdPosition;
        public InputAction @Steer => m_Wrapper.m_Vr_Steer;
        public InputAction @GasBreak => m_Wrapper.m_Vr_GasBreak;
        public InputActionMap Get() { return m_Wrapper.m_Vr; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(VrActions set) { return set.Get(); }
        public void AddCallbacks(IVrActions instance)
        {
            if (instance == null || m_Wrapper.m_VrActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_VrActionsCallbackInterfaces.Add(instance);
            @HmdRotation.started += instance.OnHmdRotation;
            @HmdRotation.performed += instance.OnHmdRotation;
            @HmdRotation.canceled += instance.OnHmdRotation;
            @HmdPosition.started += instance.OnHmdPosition;
            @HmdPosition.performed += instance.OnHmdPosition;
            @HmdPosition.canceled += instance.OnHmdPosition;
            @Steer.started += instance.OnSteer;
            @Steer.performed += instance.OnSteer;
            @Steer.canceled += instance.OnSteer;
            @GasBreak.started += instance.OnGasBreak;
            @GasBreak.performed += instance.OnGasBreak;
            @GasBreak.canceled += instance.OnGasBreak;
        }

        private void UnregisterCallbacks(IVrActions instance)
        {
            @HmdRotation.started -= instance.OnHmdRotation;
            @HmdRotation.performed -= instance.OnHmdRotation;
            @HmdRotation.canceled -= instance.OnHmdRotation;
            @HmdPosition.started -= instance.OnHmdPosition;
            @HmdPosition.performed -= instance.OnHmdPosition;
            @HmdPosition.canceled -= instance.OnHmdPosition;
            @Steer.started -= instance.OnSteer;
            @Steer.performed -= instance.OnSteer;
            @Steer.canceled -= instance.OnSteer;
            @GasBreak.started -= instance.OnGasBreak;
            @GasBreak.performed -= instance.OnGasBreak;
            @GasBreak.canceled -= instance.OnGasBreak;
        }

        public void RemoveCallbacks(IVrActions instance)
        {
            if (m_Wrapper.m_VrActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IVrActions instance)
        {
            foreach (var item in m_Wrapper.m_VrActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_VrActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public VrActions @Vr => new VrActions(this);
    public interface IVrActions
    {
        void OnHmdRotation(InputAction.CallbackContext context);
        void OnHmdPosition(InputAction.CallbackContext context);
        void OnSteer(InputAction.CallbackContext context);
        void OnGasBreak(InputAction.CallbackContext context);
    }
}
